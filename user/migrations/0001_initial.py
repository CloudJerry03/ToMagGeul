# Generated by Django 3.1.1 on 2020-09-07 19:12

from django.db import migrations, models
import django.utils.timezone
import user.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('genre', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TMUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(default='username', max_length=30)),
                ('date_of_birth', models.DateField(default=django.utils.timezone.now)),
                ('phone_number', models.CharField(default='01012345678', max_length=30)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('is_author', models.BooleanField(default=False)),
                ('point', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('prefer_genre', models.ManyToManyField(related_name='prefer_users', to='genre.Genre')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', user.managers.TMUserManager()),
            ],
        ),
    ]
